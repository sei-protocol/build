// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.0
// source: node.proto

package node

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Transactions_SendTransactions_FullMethodName = "/seiprotocol.seistream.node.Transactions/SendTransactions"
)

// TransactionsClient is the client API for Transactions service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Transactions service definition
type TransactionsClient interface {
	// Add a bidirectional stream of transactions, only errors are returned
	SendTransactions(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[Transaction, TransactionResponse], error)
}

type transactionsClient struct {
	cc grpc.ClientConnInterface
}

func NewTransactionsClient(cc grpc.ClientConnInterface) TransactionsClient {
	return &transactionsClient{cc}
}

func (c *transactionsClient) SendTransactions(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[Transaction, TransactionResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Transactions_ServiceDesc.Streams[0], Transactions_SendTransactions_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Transaction, TransactionResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Transactions_SendTransactionsClient = grpc.BidiStreamingClient[Transaction, TransactionResponse]

// TransactionsServer is the server API for Transactions service.
// All implementations must embed UnimplementedTransactionsServer
// for forward compatibility.
//
// Transactions service definition
type TransactionsServer interface {
	// Add a bidirectional stream of transactions, only errors are returned
	SendTransactions(grpc.BidiStreamingServer[Transaction, TransactionResponse]) error
	mustEmbedUnimplementedTransactionsServer()
}

// UnimplementedTransactionsServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTransactionsServer struct{}

func (UnimplementedTransactionsServer) SendTransactions(grpc.BidiStreamingServer[Transaction, TransactionResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SendTransactions not implemented")
}
func (UnimplementedTransactionsServer) mustEmbedUnimplementedTransactionsServer() {}
func (UnimplementedTransactionsServer) testEmbeddedByValue()                      {}

// UnsafeTransactionsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TransactionsServer will
// result in compilation errors.
type UnsafeTransactionsServer interface {
	mustEmbedUnimplementedTransactionsServer()
}

func RegisterTransactionsServer(s grpc.ServiceRegistrar, srv TransactionsServer) {
	// If the following call pancis, it indicates UnimplementedTransactionsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Transactions_ServiceDesc, srv)
}

func _Transactions_SendTransactions_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TransactionsServer).SendTransactions(&grpc.GenericServerStream[Transaction, TransactionResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Transactions_SendTransactionsServer = grpc.BidiStreamingServer[Transaction, TransactionResponse]

// Transactions_ServiceDesc is the grpc.ServiceDesc for Transactions service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Transactions_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "seiprotocol.seistream.node.Transactions",
	HandlerType: (*TransactionsServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendTransactions",
			Handler:       _Transactions_SendTransactions_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "node.proto",
}

const (
	Blocks_SubscribeBlocks_FullMethodName = "/seiprotocol.seistream.node.Blocks/SubscribeBlocks"
)

// BlocksClient is the client API for Blocks service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Blocks service definition
type BlocksClient interface {
	// Get blocks since a specific block number with server-side streaming
	SubscribeBlocks(ctx context.Context, in *SubscribeBlocksRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Block], error)
}

type blocksClient struct {
	cc grpc.ClientConnInterface
}

func NewBlocksClient(cc grpc.ClientConnInterface) BlocksClient {
	return &blocksClient{cc}
}

func (c *blocksClient) SubscribeBlocks(ctx context.Context, in *SubscribeBlocksRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Block], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Blocks_ServiceDesc.Streams[0], Blocks_SubscribeBlocks_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SubscribeBlocksRequest, Block]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Blocks_SubscribeBlocksClient = grpc.ServerStreamingClient[Block]

// BlocksServer is the server API for Blocks service.
// All implementations must embed UnimplementedBlocksServer
// for forward compatibility.
//
// Blocks service definition
type BlocksServer interface {
	// Get blocks since a specific block number with server-side streaming
	SubscribeBlocks(*SubscribeBlocksRequest, grpc.ServerStreamingServer[Block]) error
	mustEmbedUnimplementedBlocksServer()
}

// UnimplementedBlocksServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBlocksServer struct{}

func (UnimplementedBlocksServer) SubscribeBlocks(*SubscribeBlocksRequest, grpc.ServerStreamingServer[Block]) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeBlocks not implemented")
}
func (UnimplementedBlocksServer) mustEmbedUnimplementedBlocksServer() {}
func (UnimplementedBlocksServer) testEmbeddedByValue()                {}

// UnsafeBlocksServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BlocksServer will
// result in compilation errors.
type UnsafeBlocksServer interface {
	mustEmbedUnimplementedBlocksServer()
}

func RegisterBlocksServer(s grpc.ServiceRegistrar, srv BlocksServer) {
	// If the following call pancis, it indicates UnimplementedBlocksServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Blocks_ServiceDesc, srv)
}

func _Blocks_SubscribeBlocks_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeBlocksRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BlocksServer).SubscribeBlocks(m, &grpc.GenericServerStream[SubscribeBlocksRequest, Block]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Blocks_SubscribeBlocksServer = grpc.ServerStreamingServer[Block]

// Blocks_ServiceDesc is the grpc.ServiceDesc for Blocks service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Blocks_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "seiprotocol.seistream.node.Blocks",
	HandlerType: (*BlocksServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeBlocks",
			Handler:       _Blocks_SubscribeBlocks_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "node.proto",
}
